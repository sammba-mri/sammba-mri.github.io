

.. _sphx_glr_auto_examples_02_preprocessing_plot_template_registration.py:


Registration to template
============================
Registration of anatomical and functional scans to a given template.



Retrieve the fMRI data
----------------------



.. code-block:: python

    from sammba import data_fetchers

    retest = data_fetchers.fetch_zurich_test_retest(subjects=[0],
                                                    correct_headers=True)







retest contains paths to images and data description



.. code-block:: python

    anat_filename = retest.anat[0]
    func_filename = retest.func[0]
    print(func_filename)





.. rst-class:: sphx-glr-script-out

 Out::

    /home/salma/nilearn_data/zurich_retest/baseline/1366/rsfMRI_corrected.nii.gz


We encapsulate them through an object called `FMRISession`



.. code-block:: python

    from sammba.registration import FMRISession

    animal_session = FMRISession(anat=anat_filename, func=func_filename,
                                 animal_id='1366')







Choose the template
-------------------
We choose the downsampled version of DORR average, to avoid memory issues



.. code-block:: python

    dorr = data_fetchers.fetch_atlas_dorr_2008(downsample='100')







dorr contains paths to DORR atlas and average T2 image



.. code-block:: python

    template_filename = dorr.t2
    print(template_filename)





.. rst-class:: sphx-glr-script-out

 Out::

    /home/salma/nilearn_data/dorr_2008/Dorr_2008_average_100um.nii.gz


Define the writing directory
----------------------------



.. code-block:: python

    import os

    write_dir = os.path.join(os.getcwd(), 'zurich_template')
    if not os.path.exists(write_dir):
        os.makedirs(write_dir)







Perform the registration
------------------------
We purposely choose a low maxlev, to speed-up computations



.. code-block:: python

    from sammba.registration import fmri_sessions_to_template

    fmri_sessions_to_template(sessions=[animal_session],
                              head_template_filename=template_filename,
                              t_r=1., write_dir=write_dir,
                              brain_volume=400,
                              slice_timing=True,
                              prior_rigid_body_registration=True,
                              maxlev=1,
                              caching=True)







The paths to the registered images are added to `animal_session`



.. code-block:: python

    print('Registrered anatomical image is ' + animal_session.registered_anat_)
    print('Registrered functional image is ' + animal_session.registered_func_)





.. rst-class:: sphx-glr-script-out

 Out::

    Registrered anatomical image is /home/salma/CODE/sammba-mri/examples/02_preprocessing/zurich_template/1366/nipype_mem/sammba-externals-nipype-interfaces-afni-utils-Unifize/5df7d61258ec72ba36ec2fdd130a9a1b/3DRARE_corrected_generated_shift_rotated_warped.nii.gz
    Registrered functional image is /home/salma/CODE/sammba-mri/examples/02_preprocessing/zurich_template/nipype_mem/sammba-externals-nipype-interfaces-fsl-utils-Merge/065b2f3ca038ddfdd93a89911a2c5e74/rsfMRI_corrected_tshiftAvSl0_qw_merged_normalized.nii.gz


Visalize results
----------------
We plot the edges of the template on top of the registered anatomical image



.. code-block:: python

    from nilearn import plotting, image

    display = plotting.plot_anat(animal_session.registered_anat_, dim=-1.95,
                                 title='template edges on top of registered anat')
    display.add_edges(template_filename)




.. image:: /auto_examples/02_preprocessing/images/sphx_glr_plot_template_registration_001.png
    :align: center




and on top of the average registered functional



.. code-block:: python

    from nilearn import image

    mean_registered_func_filename = image.mean_img(animal_session.registered_func_)
    display = plotting.plot_epi(mean_registered_func_filename,
                                title='template edges on top of registered func')
    display.add_edges(template_filename)
    plotting.show()



.. image:: /auto_examples/02_preprocessing/images/sphx_glr_plot_template_registration_002.png
    :align: center




**Total running time of the script:** ( 9 minutes  22.959 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_template_registration.py <plot_template_registration.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_template_registration.ipynb <plot_template_registration.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
